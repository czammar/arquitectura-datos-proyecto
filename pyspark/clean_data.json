{"paragraphs":[{"text":"%pyspark\n#Leer data\ndf = spark.read.format(\"csv\").option(\"header\", \"true\").load(\"s3a://aws-logs-032274842050-us-east-1/On_Time_Reporting_Carrier_On_Time_Performance_(1987_present)_2019_11.csv\")\n\n#Pasar a minusculas los nombres de columnas\nfor col in df.columns:\n    df = df.withColumnRenamed(col, col.lower())\n\n#Seleccionar columnas no vacias \n\nbase = df.select(df.year,df.quarter, df.month, df.dayofmonth, df.dayofweek, df.flightdate, df.reporting_airline, df.dot_id_reporting_airline, df.iata_code_reporting_airline, df.tail_number, df.flight_number_reporting_airline, df.originairportid, df.originairportseqid, df.origincitymarketid, df.origin, df.origincityname, df.originstate, df.originstatefips, df.originstatename, df.originwac, df.destairportid, df.destairportseqid, df.destcitymarketid, df.dest, df.destcityname, df.deststate, df.deststatefips, df.deststatename, df.destwac, df.crsdeptime, df.deptime, df.depdelay, df.depdelayminutes, df.depdel15, df.departuredelaygroups, df.deptimeblk, df.taxiout, df.wheelsoff, df.wheelson, df.taxiin, df.crsarrtime, df.arrtime, df.arrdelay, df.arrdelayminutes, df.arrdel15, df.arrivaldelaygroups, df.arrtimeblk, df.cancelled, df.diverted, df.crselapsedtime, df.actualelapsedtime, df.airtime, df.flights, df.distance, df.distancegroup, df.divairportlandings )\n\n#agregar columna con clasificación de tiempo en horas de atraso del vuelo 0-1.5, 1.5-3.5,3.5-, cancelled\n\nfrom pyspark.sql import functions as f\nbase = base.withColumn('rangoatrasohoras', f.when(f.col('cancelled') == 1, \"cancelled\").when(f.col('depdelayminutes') < 90, \"0-1.5\").when((f.col('depdelayminutes') > 90) & (f.col('depdelayminutes')<210), \"1.5-3.5\").otherwise(\"3.5-\"))\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import StringType\nfrom pyspark.sql.functions import col, lower, regexp_replace, split\n\n#Función limpieza\ndef clean_text(c):\n  c = lower(c)\n  c = regexp_replace(c, \" \", \"_\")\n  c = f.split(c, '\\,')[0]\n  return c\n\n\n # Aplicación de la función limpieza\nbase = base.withColumn(\"origincityname\", clean_text(col(\"origincityname\")))\nbase = base.withColumn(\"destcityname\", clean_text(col(\"destcityname\")))\n","user":"anonymous","dateUpdated":"2020-04-11T00:58:01+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1586566527961_-1011878101","id":"20200411-005527_1242528742","dateCreated":"2020-04-11T00:55:27+0000","dateStarted":"2020-04-11T00:58:01+0000","dateFinished":"2020-04-11T00:58:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7187"},{"text":"%pyspark\nbase.printSchema()","user":"anonymous","dateUpdated":"2020-04-11T00:58:27+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1586566577702_87447357","id":"20200411-005617_1871945057","dateCreated":"2020-04-11T00:56:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7188","dateFinished":"2020-04-11T00:58:27+0000","dateStarted":"2020-04-11T00:58:27+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- year: string (nullable = true)\n |-- quarter: string (nullable = true)\n |-- month: string (nullable = true)\n |-- dayofmonth: string (nullable = true)\n |-- dayofweek: string (nullable = true)\n |-- flightdate: string (nullable = true)\n |-- reporting_airline: string (nullable = true)\n |-- dot_id_reporting_airline: string (nullable = true)\n |-- iata_code_reporting_airline: string (nullable = true)\n |-- tail_number: string (nullable = true)\n |-- flight_number_reporting_airline: string (nullable = true)\n |-- originairportid: string (nullable = true)\n |-- originairportseqid: string (nullable = true)\n |-- origincitymarketid: string (nullable = true)\n |-- origin: string (nullable = true)\n |-- origincityname: string (nullable = true)\n |-- originstate: string (nullable = true)\n |-- originstatefips: string (nullable = true)\n |-- originstatename: string (nullable = true)\n |-- originwac: string (nullable = true)\n |-- destairportid: string (nullable = true)\n |-- destairportseqid: string (nullable = true)\n |-- destcitymarketid: string (nullable = true)\n |-- dest: string (nullable = true)\n |-- destcityname: string (nullable = true)\n |-- deststate: string (nullable = true)\n |-- deststatefips: string (nullable = true)\n |-- deststatename: string (nullable = true)\n |-- destwac: string (nullable = true)\n |-- crsdeptime: string (nullable = true)\n |-- deptime: string (nullable = true)\n |-- depdelay: string (nullable = true)\n |-- depdelayminutes: string (nullable = true)\n |-- depdel15: string (nullable = true)\n |-- departuredelaygroups: string (nullable = true)\n |-- deptimeblk: string (nullable = true)\n |-- taxiout: string (nullable = true)\n |-- wheelsoff: string (nullable = true)\n |-- wheelson: string (nullable = true)\n |-- taxiin: string (nullable = true)\n |-- crsarrtime: string (nullable = true)\n |-- arrtime: string (nullable = true)\n |-- arrdelay: string (nullable = true)\n |-- arrdelayminutes: string (nullable = true)\n |-- arrdel15: string (nullable = true)\n |-- arrivaldelaygroups: string (nullable = true)\n |-- arrtimeblk: string (nullable = true)\n |-- cancelled: string (nullable = true)\n |-- diverted: string (nullable = true)\n |-- crselapsedtime: string (nullable = true)\n |-- actualelapsedtime: string (nullable = true)\n |-- airtime: string (nullable = true)\n |-- flights: string (nullable = true)\n |-- distance: string (nullable = true)\n |-- distancegroup: string (nullable = true)\n |-- divairportlandings: string (nullable = true)\n |-- rangoatrasohoras: string (nullable = false)\n\n"}]}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-04-11T00:58:59+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1586566739370_751328136","id":"20200411-005859_955605630","dateCreated":"2020-04-11T00:58:59+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7494"}],"name":"clean_data","id":"2F4YKF8WG","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}